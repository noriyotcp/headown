# TypeProf 0.21.2

# polyfill for thor
class Thor
  def self.desc: (String, String, ?Hash[Symbol, String]) -> void
end

# polyfill for URI
class URI
  def self.open: (String) { (IO) -> (::String | nil) } -> IO
end

# polyfill for commonmarker
module CommonMarker
  def self.render_doc: (::IO) -> CommonMarker::Node

  class Node
    def each: [U] { (Node) -> U } -> ::Array[U]
    def walk: [U] { (Node) -> U } -> ::Array[U]
    attr_reader type: Symbol
    attr_reader string_content: String
    attr_reader header_level: Integer
  end
end

# Classes
module Headown
  VERSION: String

  class NotMarkdownError < StandardError
    def initialize: (file_path: String) -> void
  end

  class Extractor
    attr_reader headers: Array[String]
    def initialize: (String file_path) -> Array[String]

    private
    def extract_headers: (IO file_data) -> Array[String]
    def header_nodes: (IO data) -> Array[CommonMarker::Node]
    def build_header: (CommonMarker::Node node) -> String
  end

  class CLI < Thor
    def extract: (String file_path) -> void
  end
end
